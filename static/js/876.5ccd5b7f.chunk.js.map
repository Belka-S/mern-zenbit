{"version":3,"file":"static/js/876.5ccd5b7f.chunk.js","mappings":"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","sources":["components/AuthForms/AuthLinks/LinkBtn.jsx","components/AuthForms/SigninForm.jsx","components/AuthForms/ForgotForm.jsx","pages/SigninPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { Btn } from './Link.styled';\n\nconst LinkBtn = ({ onClick, fs, children }) => {\n  return (\n    <Btn type=\"button\" onClick={onClick} fs={fs}>\n      {children}\n    </Btn>\n  );\n};\n\nexport default LinkBtn;\n\nBtn.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  fs: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport toast from 'react-hot-toast';\nimport { Fragment, useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport LinkRoute from 'components/AuthForms/AuthLinks/LinkRoute';\nimport LinkBtn from './AuthLinks/LinkBtn';\nimport SignBtn from './AuthBtns/SignBtn';\nimport IconBtn from './IconBtn/IconBtn';\nimport GoogleBtn from './AuthBtns/GoogleBtn';\nimport { loginThunk } from 'store/auth/authOperations';\nimport { signinSchema } from 'utils/validation';\nimport { Form, Field, FieldWrap } from 'components/AuthForms/AuthForms.styled';\nimport { ErrorMsg, Label, Tittle } from 'components/AuthForms/AuthForms.styled';\nimport { SuccessIcon, ErrorIcon } from 'components/AuthForms/AuthForms.styled';\n\nconst initialValues = { email: '', password: '' };\n\nconst SigninForm = ({ setIsVerify, setIsForgot, setEmail }) => {\n  const dispatch = useDispatch();\n  const [toggle, setToggle] = useState('password');\n\n  const isValid = ({ values, errors, key }) => {\n    const noValue = !values[key] && 'noValue';\n    const isError = errors[key] ? 'error' : 'success';\n    return noValue || isError;\n  };\n\n  const isDisabled = ({ errors, values }) => {\n    const isError = Object.keys(errors).length;\n    const noValue = Object.keys(values).some(key => !values[key]);\n    return noValue || isError;\n  };\n\n  const onClick = ({ email }) => {\n    setEmail(email);\n    setIsForgot(true);\n  };\n\n  const onSubmit = (values, actions) => {\n    dispatch(loginThunk(values))\n      .unwrap()\n      .then(pld => setIsVerify(!pld.result.user.verifiedEmail))\n      .catch(err => err.includes('401') && toast('Unauthorized'));\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={signinSchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, errors }) => (\n        <Form>\n          <Tittle>\n            <h2>Log In</h2>\n          </Tittle>\n          {Object.keys(initialValues).map(key => (\n            <Fragment key={key}>\n              <Label>\n                {key.at(0).toUpperCase() + key.substring(1)}\n                <pre> </pre>\n                <ErrorMsg name={key} component=\"span\" />\n              </Label>\n\n              <FieldWrap>\n                <Field\n                  type={key === 'password' ? toggle : key}\n                  name={key}\n                  placeholder={key.at(0).toUpperCase() + key.substring(1)}\n                  validation={isValid({ values, errors, key })}\n                />\n\n                {key === 'password' && (\n                  <IconBtn toggle={toggle} setToggle={setToggle} />\n                )}\n                {values[key] && errors[key] && <ErrorIcon />}\n                {values[key] && !errors[key] && <SuccessIcon />}\n              </FieldWrap>\n\n              {key === 'password' && (\n                <LinkBtn onClick={() => onClick(values)}>\n                  Forgot password?\n                </LinkBtn>\n              )}\n            </Fragment>\n          ))}\n          <SignBtn disabled={isDisabled({ values, errors })}>Sign in</SignBtn>\n          <GoogleBtn />\n\n          <span className=\"toggler\">\n            Don't have an account? <LinkRoute to=\"/signup\">Sign Up</LinkRoute>\n          </span>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default SigninForm;\n\nSigninForm.propTypes = {\n  setIsVerify: PropTypes.func.isRequired,\n  setIsForgot: PropTypes.func.isRequired,\n  setEmail: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Fragment } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport SignBtn from './AuthBtns/SignBtn';\nimport { forgotThunk } from 'store/auth/authOperations';\nimport { forgotSchema } from 'utils/validation';\nimport { Form, Field, FieldWrap } from 'components/AuthForms/AuthForms.styled';\nimport { ErrorMsg, Label, Tittle } from 'components/AuthForms/AuthForms.styled';\nimport { SuccessIcon, ErrorIcon } from 'components/AuthForms/AuthForms.styled';\n\nconst ForgotForm = ({ setIsForgot, email }) => {\n  const dispatch = useDispatch();\n\n  const isValid = ({ values, errors }) => {\n    const noValue = !Object.values(values)[0] && 'noValue';\n    const isError = Object.values(errors).length ? 'error' : 'success';\n    return noValue || isError;\n  };\n\n  const isDisabled = ({ errors }) => Object.keys(errors).length;\n\n  const onSubmit = (values, actions) => {\n    dispatch(forgotThunk(values))\n      .unwrap() // .then(pld => console.log(pld))\n      .catch(err => console.log(err));\n\n    setIsForgot(false); // actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ email }}\n      validationSchema={forgotSchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, errors }) => (\n        <Form>\n          <Tittle>\n            <h2>Get reset link</h2>\n          </Tittle>\n\n          <Fragment>\n            <Label>\n              Email\n              <pre> </pre>\n              <ErrorMsg name=\"email\" component=\"span\" />\n            </Label>\n\n            <FieldWrap>\n              <Field\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Email\"\n                validation={isValid({ values, errors })}\n              />\n\n              {isValid({ values, errors }) === 'error' && <ErrorIcon />}\n              {isValid({ values, errors }) === 'success' && <SuccessIcon />}\n            </FieldWrap>\n          </Fragment>\n\n          <SignBtn disabled={isDisabled({ errors })}>Submit</SignBtn>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ForgotForm;\n\nForgotForm.propTepes = {\n  setIsForgot: PropTypes.func.isRequired,\n  email: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\n\nimport AuthLayout from 'layouts/AuthLayout/AuthLayout';\nimport SigninForm from 'components/AuthForms/SigninForm';\nimport ForgotForm from 'components/AuthForms/ForgotForm';\nimport Modal from 'components/Modal/Modal';\nimport VerifyForm from 'components/AuthForms/VerifyForm';\n\nconst SigninPage = () => {\n  const [isVerify, setIsVerify] = useState(false);\n  const [isForgot, setIsForgot] = useState(false);\n  const [email, setEmail] = useState('');\n\n  return (\n    <AuthLayout>\n      <SigninForm\n        setIsVerify={setIsVerify}\n        setIsForgot={setIsForgot}\n        setEmail={setEmail}\n      />\n\n      {isVerify && (\n        <Modal onClick={() => setIsVerify(!isVerify)}>\n          <VerifyForm />\n        </Modal>\n      )}\n\n      {isForgot && (\n        <Modal onClick={() => setIsForgot(!isForgot)}>\n          <ForgotForm setIsForgot={setIsForgot} email={email} />\n        </Modal>\n      )}\n    </AuthLayout>\n  );\n};\n\nexport default SigninPage;\n"],"names":["_ref","onClick","fs","children","_jsx","Btn","type","propTypes","PropTypes","isRequired","initialValues","email","password","setIsVerify","setIsForgot","setEmail","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","toggle","setToggle","isValid","_ref2","values","errors","key","noValue","isError","isDisabled","_ref3","Object","keys","length","some","Formik","validationSchema","signinSchema","onSubmit","actions","loginThunk","unwrap","then","pld","result","user","verifiedEmail","catch","err","includes","toast","resetForm","_ref5","_jsxs","Form","Tittle","map","Fragment","Label","at","toUpperCase","substring","ErrorMsg","name","component","FieldWrap","Field","placeholder","validation","IconBtn","ErrorIcon","SuccessIcon","LinkBtn","_ref4","SignBtn","disabled","GoogleBtn","className","LinkRoute","to","ForgotForm","forgotSchema","forgotThunk","console","log","propTepes","isVerify","_useState3","_useState4","isForgot","_useState5","_useState6","AuthLayout","SigninForm","Modal","VerifyForm"],"sourceRoot":""}