{"version":3,"file":"static/js/86.7741d781.chunk.js","mappings":"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","sources":["components/AuthForms/AuthBtns/AuthBtns.styled.jsx","components/AuthForms/AuthBtns/SignBtn.jsx","components/AuthForms/AuthForms.styled.jsx","components/AuthForms/IconBtn/IconBtn.styled.jsx","components/AuthForms/IconBtn/IconBtn.jsx","components/AuthForms/ResetForm.jsx","pages/ResetPage.jsx","utils/constants/regExp.js","utils/constants/contactFields.js","utils/validation/userSchema.js","utils/validation/contactSchema.js"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { themes } from 'styles/themes';\n\nconst CommonStyles = css`\n  height: 41px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  cursor: pointer;\n  font-family: 'Roboto', sans-serif;\n  font-size: 14px;\n\n  @media screen and (width >= 768px) {\n    font-size: 16px;\n  }\n\n  border: 1px solid;\n  border-radius: ${themes.radius.s};\n  transition: border-color 250ms, background-color 250ms, color 250ms;\n`;\n\nexport const SignButton = styled.button`\n  ${CommonStyles};\n\n  margin-top: 30px;\n\n  font-weight: 700;\n  border-color: ${themes.colors.accent};\n  color: ${themes.colors.white};\n  background-color: ${themes.colors.accent};\n\n  &:hover,\n  &:focus {\n    border-color: ${themes.colors.hovered};\n    background-color: ${themes.colors.hovered};\n  }\n\n  &:disabled {\n    cursor: auto;\n    color: ${themes.colors.border};\n    border-color: ${themes.colors.accent};\n    background-color: ${themes.colors.accent};\n  }\n`;\n\nexport const IconLink = styled.a`\n  ${CommonStyles};\n\n  margin-top: 18px;\n  padding-inline: 10px;\n\n  font-weight: 400;\n  border-color: ${themes.colors.border};\n  color: ${themes.colors.black};\n  background-color: ${themes.colors.white};\n\n  &:hover,\n  &:focus {\n    color: ${themes.colors.hovered};\n    border-color: ${themes.colors.hovered};\n    background-color: ${themes.colors.ligthBlue};\n  }\n\n  & pre {\n    font-size: 12px;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { SignButton } from './AuthBtns.styled';\n\nconst SignBtn = ({ onClick, disabled, children }) => {\n  return (\n    <SignButton onClick={onClick} type=\"submit\" disabled={disabled}>\n      {children}\n    </SignButton>\n  );\n};\n\nexport default SignBtn;\n\nSignButton.propTepes = {\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  children: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.node,\n    PropTypes.oneOf(['img', 'png', 'svg']),\n  ]).isRequired,\n};\n","import styled, { css } from 'styled-components';\nimport { Form as FormikForm } from 'formik';\nimport { Field as FormikField } from 'formik';\nimport { ErrorMessage } from 'formik';\nimport { BsCheckCircle, BsExclamationCircle } from 'react-icons/bs';\n\nimport { themes } from 'styles/themes';\n\nexport const Form = styled(FormikForm)`\n  height: 100vh;\n  padding: 100px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  background-color: ${themes.colors.white};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: baseline;\n\n  font-size: 16px;\n  font-weight: 500;\n\n  & pre {\n    font-size: 10px;\n  }\n  // &::first-letter { text-transform: uppercase; }\n`;\n\nconst FieldStyles = css`\n  margin-bottom: 20px;\n  width: 100%;\n\n  &:last-of-type {\n    margin-bottom: 0;\n  }\n`;\n\nexport const FieldWrap = styled.div`\n  ${FieldStyles}\n  position: relative;\n`;\n\nexport const Field = styled(FormikField)`\n  ${FieldStyles}\n\n  padding: 10px 12px;\n  padding-left: ${({ name }) => name.toLowerCase().includes('pass') && '38px'};\n\n  font-size: 16px;\n  font-family: 'Roboto', sans-serif;\n\n  border: 1px solid ${themes.colors.border};\n  border-radius: ${themes.radius.s};\n  outline: 0.5px solid transparent;\n  transition: border-color 250ms linear, outline-color 250ms linear;\n\n  border-color: ${({ validation }) => {\n    switch (validation) {\n      case 'noValue':\n        return themes.colors.border;\n      case validation:\n        return themes.colors[validation];\n      default:\n        break;\n    }\n  }};\n\n  &:hover,\n  &:focus {\n    border-color: ${({ validation }) => {\n      switch (validation) {\n        case validation:\n          return themes.colors[validation];\n        default:\n          break;\n      }\n    }};\n\n    outline-color: ${({ validation }) => {\n      switch (validation) {\n        case validation:\n          return themes.colors[validation];\n        default:\n          break;\n      }\n    }};\n  }\n`;\n\nexport const Tittle = styled.div`\n  margin-bottom: 25px;\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n\n  & h2 {\n    margin: 0;\n\n    font-family: 'Montserrat', sans-serif;\n    font-size: 24px;\n  }\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  font-size: 14px;\n  font-weight: 400;\n\n  color: ${themes.colors.error};\n`;\n\nconst IconStyles = css`\n  position: absolute;\n  top: 50%;\n  right: 12px;\n  transform: translateY(-50%);\n`;\n\nexport const SuccessIcon = styled(BsCheckCircle)`\n  ${IconStyles};\n\n  color: ${themes.colors.success};\n`;\n\nexport const ErrorIcon = styled(BsExclamationCircle)`\n  ${IconStyles};\n\n  color: ${themes.colors.error};\n`;\n","import styled from 'styled-components';\nimport { themes } from 'styles/themes';\n\nexport const Button = styled.button`\n  width: fit-content;\n  position: absolute;\n  top: 50%;\n  left: 10px;\n\n  transform: translateY(-50%);\n\n  border-color: transparent;\n  background-color: transparent;\n  color: ${themes.colors.border};\n  transition: color 250ms;\n\n  &:hover,\n  &:focus {\n    color: ${themes.colors.black};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { BsEye, BsEyeSlash } from 'react-icons/bs';\n\nimport { Button } from './IconBtn.styled';\n\nconst IconBtn = ({ toggle, setToggle }) => {\n  const onClick = () => {\n    if (toggle === 'text') setToggle('password');\n    if (toggle === 'password') setToggle('text');\n  };\n\n  return (\n    <Button type=\"button\" onClick={onClick}>\n      {toggle === 'password' && <BsEye size=\"18px\" />}\n      {toggle === 'text' && <BsEyeSlash size=\"18px\" />}\n    </Button>\n  );\n};\n\nexport default IconBtn;\n\nIconBtn.propTypes = {\n  setToggle: PropTypes.func.isRequired,\n  toggle: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Fragment, useState } from 'react';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport SignBtn from './AuthBtns/SignBtn';\nimport IconBtn from './IconBtn/IconBtn';\nimport { resetThunk } from 'store/auth/authOperations';\nimport { resetSchema } from 'utils/validation';\nimport { Form, Field, FieldWrap } from 'components/AuthForms/AuthForms.styled';\nimport { ErrorMsg, Label, Tittle } from 'components/AuthForms/AuthForms.styled';\nimport { SuccessIcon, ErrorIcon } from 'components/AuthForms/AuthForms.styled';\n\nconst initialValues = { newPass: '', confirmPass: '' };\n\nconst ResetForm = ({ id, pwdToken }) => {\n  const dispatch = useDispatch();\n  const [toggle, setToggle] = useState('password');\n\n  const isValid = ({ values, errors, key }) => {\n    const noValue = !values[key] && 'noValue';\n    const isError = errors[key] ? 'error' : 'success';\n    return noValue || isError;\n  };\n\n  const isDisabled = ({ errors, values }) => {\n    const isError = Object.keys(errors).length;\n    const noValue = Object.keys(values).some(key => !values[key]);\n    return noValue || isError;\n  };\n\n  const onSubmit = (values, actions) => {\n    dispatch(resetThunk({ ...values, id, pwdToken }))\n      .unwrap() // .then(pld => console.log(pld))\n      .catch(err => console.log(err));\n\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={resetSchema}\n      onSubmit={onSubmit}\n    >\n      {({ values, errors }) => (\n        <Form>\n          <Tittle>\n            <h2>Reset password</h2>\n          </Tittle>\n\n          {Object.keys(initialValues).map(key => (\n            <Fragment key={key}>\n              <Label>\n                {key.at(0).toUpperCase() +\n                  key.replace('Pass', ' password:').substring(1)}\n                <pre> </pre>\n                <ErrorMsg name={key} component=\"span\" />\n              </Label>\n\n              <FieldWrap>\n                <Field\n                  type={toggle}\n                  name={key}\n                  validation={isValid({ values, errors, key })}\n                />\n\n                <IconBtn toggle={toggle} setToggle={setToggle} />\n                {values[key] && errors[key] && <ErrorIcon />}\n                {values[key] && !errors[key] && <SuccessIcon />}\n              </FieldWrap>\n            </Fragment>\n          ))}\n\n          <SignBtn disabled={isDisabled({ values, errors })}>Submit</SignBtn>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default ResetForm;\n\nResetForm.propTypes = {\n  id: PropTypes.string.isRequired,\n  pwdToken: PropTypes.string.isRequired,\n};\n","import { useSearchParams } from 'react-router-dom';\n\nimport Container from 'components/shared/Container/Container';\nimport ResetForm from 'components/AuthForms/ResetForm';\n\nconst ResetPage = () => {\n  const [searchParams] = useSearchParams();\n\n  const id = searchParams.get('id');\n  const pwdToken = searchParams.get('pwd_token');\n\n  return (\n    <Container w=\"400px\" h=\"100vh\" p=\"0\" d=\"flex\" fd=\"column\" jc=\"center\">\n      <ResetForm id={id} pwdToken={pwdToken} />\n    </Container>\n  );\n};\n\nexport default ResetPage;\n","export const NAME = {\n  msg: 'only letters, numbers, underscores, dashes, spases',\n  regExp: /^[a-zA-Zа-яА-Я0-9]+(([_ -][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nexport const EMAIL = {\n  msg: 'test@test.com, test@test.ua',\n  regExp: /^\\w+([\\\\.-]?\\w+)*@\\w+([\\\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n};\n\nexport const PHONE = {\n  msg: 'only digits, spaces, dashes, parentheses, can start with +',\n  regExp: /^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$/,\n};\n\nexport const TELEGRAM = {\n  msg: 'only letters and numbers,  more than five, start with @',\n  regExp: /.*\\B@(?=\\w{5,32}\\b)[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*$/,\n};\n\nexport const TELEGRAM_PHONE = {\n  msg: 'only letters, digits, spaces, dashes, parentheses, can start with +, @',\n  regExp:\n    /(.*\\B@(?=\\w{5,32}\\b)[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*$)|(^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$)/,\n};\n\nexport const LINKEDIN = {\n  msg: 'https://linkedin.com',\n  regExp:\n    /^(http(s)?:\\/\\/)?([\\w]+\\.)?linkedin\\.com\\/(pub|in|profile)+\\/(([_-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nexport const GITHUB = {\n  msg: 'https://...github',\n  regExp:\n    /^(http(s?):\\/\\/)?(www\\.)?github\\.com+\\/(([_-][a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n\nexport const DATE = {\n  msg: 'dd-mm-yyyy',\n  regExp:\n    /^([0-2^([0-2][0-9]|(3)[0-1])(-)(((0)[0-9])|((1)[0-2]))(-)((19|20)\\d{2}$)/,\n};\n\nexport const ADDRESS = {\n  msg: 'only letters, numbers, commas, dashes, spases',\n  regExp: /^[a-zA-Zа-яА-Я0-9]+(([ -]|(, )[a-zA-Zа-яА-Я])?[a-zA-Zа-яА-Я0-9]*)*$/,\n};\n","export const CONTACT_FIELDS = [\n  'phone',\n  'email',\n  'whatsapp',\n  'viber',\n  'telegram',\n  'linkedin',\n  'github',\n  'address',\n  'birthday',\n  'notes',\n];\n\nexport const FORM_FIELDS = ['firstName', 'lastName', ...CONTACT_FIELDS];\n","import * as Yup from 'yup';\n\nimport { NAME, EMAIL } from 'utils/constants';\n\nconst name = Yup.string()\n  .min(4, 'is too short')\n  .matches(NAME.regExp, NAME.msg)\n  .required('is required');\nconst email = Yup.string()\n  .matches(EMAIL.regExp, EMAIL.msg)\n  .required('is required');\nconst password = Yup.string().min(6, 'is too short').required('is required');\nconst code = Yup.number().required('is required').typeError('must be a number');\n\nexport const signupSchema = Yup.object().shape({ name, email, password });\nexport const signinSchema = Yup.object().shape({ email, password });\nexport const verifySchema = Yup.object().shape({ verificationCode: code });\nexport const forgotSchema = Yup.object().shape({ email });\nexport const resetSchema = Yup.object().shape({\n  newPass: password,\n  confirmPass: password.oneOf([Yup.ref('newPass')], 'must match'),\n});\n","import * as Yup from 'yup';\n\nimport { NAME, PHONE, EMAIL, TELEGRAM } from 'utils/constants';\nimport { DATE, ADDRESS, LINKEDIN, GITHUB } from 'utils/constants';\n\nexport const contactSchema = Yup.object().shape({\n  firstName: Yup.string().matches(NAME.regExp, NAME.msg).required('Required'),\n  lastName: Yup.string().matches(NAME.regExp, NAME.msg),\n  phone: Yup.string().matches(PHONE.regExp, PHONE.msg).required('Required'),\n  email: Yup.string().matches(EMAIL.regExp, EMAIL.msg),\n  whatsapp: Yup.string().matches(PHONE.regExp, PHONE.msg),\n  viber: Yup.string().matches(PHONE.regExp, PHONE.msg),\n  telegram: Yup.string().matches(TELEGRAM.regExp, TELEGRAM.msg),\n  linkedin: Yup.string().matches(LINKEDIN.regExp, LINKEDIN.msg),\n  github: Yup.string().matches(GITHUB.regExp, GITHUB.msg),\n  address: Yup.string().matches(ADDRESS.regExp, ADDRESS.msg),\n  birthday: Yup.string().matches(DATE.regExp, DATE.msg),\n  notes: Yup.string(),\n});\n"],"names":["CommonStyles","css","_templateObject","_taggedTemplateLiteral","themes","radius","s","SignButton","styled","button","_templateObject2","colors","accent","white","hovered","border","IconLink","a","_templateObject3","black","ligthBlue","_ref","onClick","disabled","children","_jsx","type","propTepes","PropTypes","isRequired","Form","FormikForm","Label","label","FieldStyles","FieldWrap","div","_templateObject4","Field","FormikField","_templateObject5","name","toLowerCase","includes","_ref2","validation","_ref3","_ref4","Tittle","_templateObject6","ErrorMsg","ErrorMessage","_templateObject7","error","IconStyles","_templateObject8","SuccessIcon","BsCheckCircle","_templateObject9","success","ErrorIcon","BsExclamationCircle","_templateObject10","Button","toggle","setToggle","_jsxs","BsEye","size","BsEyeSlash","initialValues","newPass","confirmPass","id","pwdToken","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","isValid","values","errors","key","noValue","isError","isDisabled","Object","keys","length","some","Formik","validationSchema","resetSchema","onSubmit","actions","resetThunk","_objectSpread","unwrap","catch","err","console","log","resetForm","map","Fragment","at","toUpperCase","replace","substring","component","IconBtn","SignBtn","_useSearchParams","useSearchParams","searchParams","get","Container","w","h","p","d","fd","jc","ResetForm","NAME","concat","EMAIL","PHONE","TELEGRAM","LINKEDIN","GITHUB","DATE","ADDRESS","Yup","min","matches","required","email","password","code","typeError","signupSchema","shape","signinSchema","verifySchema","verificationCode","forgotSchema","oneOf","firstName","lastName","phone","whatsapp","viber","telegram","linkedin","github","address","birthday","notes"],"sourceRoot":""}